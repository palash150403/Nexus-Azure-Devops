trigger:
  branches:
    include:
      - develop
      - release
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  RestoreBuildProjects: '**/*.csproj'
  BuildConfiguration: 'Release'
  NuGetPackageOutput: '$(Build.ArtifactStagingDirectory)/nuget'
  ProjectName: 'helloworld'


stages:
- stage: tag
  displayName: "Succeed Stage"
  jobs:
  - job: SucceedJob
    displayName: "Job that succeeds"
    steps:
    # Step 1: Display all files in the repository
    - script: ls -R
      displayName: 'List all files in the repository'

    # Step 2: Check for Tag and Stop Pipeline if Present
    - script: |
        echo "Checking if a tag is present..."

        TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
        if [ -n "$TAG" ]; then
            echo "Tag detected: $TAG. Stopping the pipeline."
            echo "##vso[task.setvariable variable=StopPipeline;isOutput=false]true"
            exit 0
        else
            echo "No tag found. Proceeding with the pipeline."
            echo "##vso[task.setvariable variable=StopPipeline;isOutput=false]false"
        fi
      displayName: 'Check for Tag and Stop Pipeline if Present'


- stage: build
  displayName: "Succeed Stage"
  jobs:
  - job: SucceedJob
    displayName: "Job that succeeds"
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      condition: ne(variables['StopPipeline'], 'true')

    # Step 3: Restore NuGet packages
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(RestoreBuildProjects)'
      condition: ne(variables['StopPipeline'], 'true')

    # Step 4: Build the project
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(RestoreBuildProjects)'
        arguments: '--configuration $(BuildConfiguration)'
      condition: ne(variables['StopPipeline'], 'true')

    # Step 5: Set Dynamic Versioning and Paths
    - script: |
        echo "Determining branch-specific versioning and paths..."

        BUILD_BUILDNUMBER=$(Build.BuildNumber)
        COMMIT_ID=$(echo "$BUILD_SOURCEVERSION" | cut -c 1-5)
        BRANCH_NAME=$(Build.SourceBranchName)

        echo "Branch name is: $BRANCH_NAME"

        PACK_OUTPUT=$(Build.ArtifactStagingDirectory)/nuget

        TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")

        if [ -z "$TAG" ]; then
            TAG=$(git tag --sort=-creatordate | head -n 1 || echo "untagged")
        fi

        if [ "$BRANCH_NAME" == "develop" ]; then
            VERSION="1.0.0-$BUILD_BUILDNUMBER"
        elif [ "$BRANCH_NAME" == "main" ]; then
            VERSION="$TAG-$(ProjectName)"
            PACK_OUTPUT="$(Build.ArtifactStagingDirectory)/nuget/1.0"
        elif [ "$BRANCH_NAME" == "release" ]; then
            VERSION="1.0.0-$COMMIT_ID-$BRANCH_NAME"
            PACK_OUTPUT="$(Build.ArtifactStagingDirectory)/nuget/release"
        else
            VERSION="$(ProjectName)-1.0.$BUILD_BUILDNUMBER-beta"
        fi

        echo "##vso[task.setvariable variable=PackageVersion]$VERSION"
        echo "##vso[task.setvariable variable=NuGetPackageOutput]$PACK_OUTPUT"
      condition: ne(variables['StopPipeline'], 'true')
      displayName: 'Set Dynamic Versioning and Paths'

    # Step 5.1: Update PackageId in .csproj for main branch
    - script: |
        echo "Updating PackageId in .csproj for main branch..."

        # Get the nearest tag using 'git describe' or 'git tag' if no tag exists
        TAG=$(git describe --tags --exact-match 2>/dev/null || git tag --sort=-creatordate | head -n 1 || echo "untagged")
        echo "Tag: $TAG"

        # Construct the dynamic PackageId
        PACKAGE_ID="$TAG-$(ProjectName)"
        echo "Dynamic PackageId: $PACKAGE_ID"

        # Update the .csproj file with the dynamic PackageId
        find . -name '*.csproj' -exec sed -i "s|<PackageId>.*</PackageId>|<PackageId>${PACKAGE_ID}</PackageId>|g" {} +

        # Confirm the update by printing the .csproj file contents
        find . -name '*.csproj' -exec cat {} \;

      condition: eq(variables['Build.SourceBranchName'], 'main')
      displayName: 'Update PackageId in .csproj for main'





    # Step 5.2: Update PackageId in .csproj for release branch
    - script: |
        echo "Updating PackageId in .csproj for release branch..."

        SHORT_COMMIT_ID=$(echo "$(Build.SourceVersion)" | cut -c 1-5)
        echo "Short Commit ID: $SHORT_COMMIT_ID"

        PACKAGE_ID="$(ProjectName)-$(PackageVersion)-$SHORT_COMMIT_ID-$(Build.SourceBranchName)"
        echo "Dynamic PackageId: $PACKAGE_ID"

        find . -name '*.csproj' -exec sed -i "s|<PackageId>.*</PackageId>|<PackageId>${PACKAGE_ID}</PackageId>|g" {} +

        find . -name '*.csproj' -exec cat {} \;

      condition: eq(variables['Build.SourceBranchName'], 'release')
      displayName: 'Update PackageId in .csproj for release'

    # Step 6: Pack the project
    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: pack
        packagesToPack: '$(RestoreBuildProjects)'
        versioningScheme: 'off'
        arguments: '--configuration $(BuildConfiguration) /p:PackageVersion=$(PackageVersion)'
        outputDir: '$(NuGetPackageOutput)'  
      condition: ne(variables['StopPipeline'], 'true')
    # Step 7: Publish the project
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
      condition: ne(variables['StopPipeline'], 'true')
    # Step 8: Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(NuGetPackageOutput)'
      condition: ne(variables['StopPipeline'], 'true')

    # Step 9: Push NuGet packages based on branch
    - task: NuGetCommand@2
      displayName: 'Push NuGet Package (Develop)'
      condition: eq(variables['Build.SourceBranchName'], 'develop')
      inputs:
        command: 'push'
        packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'develop-con'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package (Main)'
      condition: eq(variables['Build.SourceBranchName'], 'main')
      inputs:
        command: 'push'
        packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'main-con'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package (Release)'
      condition: eq(variables['Build.SourceBranchName'], 'release')
      inputs:
        command: 'push'
        packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'release-con'
  condition: succeeded('tag')
