trigger:
  branches:
    include:
      - main
      - develop
      - release

pool:
  vmImage: 'windows-latest'

variables:
  RestoreBuildProjects: '**/*.csproj'
  BuildConfiguration: 'Release'
  NuGetPackageOutput: '$(Build.ArtifactStagingDirectory)/nuget'
  DemoFolderPath: '$(Build.ArtifactStagingDirectory)/demo'

steps:
# Step 1: Display all files in the repository
- script: dir /s
  displayName: 'List all files in the repository'

# Step 2: Set up .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 3: Restore NuGet packages
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(RestoreBuildProjects)'

# Step 4: Build the project
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

# Step 5: Set versioning and paths
- script: |
    echo Determining branch-specific versioning and paths...
    IF "%Build.SourceBranchName%"=="develop" (
        SET VERSION=1.0.0-alpha-%Build.BuildId%
        SET PACK_OUTPUT=%DemoFolderPath%
        mkdir "%DemoFolderPath%"
    ) ELSE IF "%Build.SourceBranchName%"=="main" (
        SET VERSION=1.0.0
        SET PACK_OUTPUT=%NuGetPackageOutput%\1.0.0
        mkdir "%PACK_OUTPUT%"
    ) ELSE (
        SET VERSION=1.0.0-beta-%Build.BuildId%
        SET PACK_OUTPUT=%NuGetPackageOutput%
    )
    echo Generated version: %VERSION%
    echo ##vso[task.setvariable variable=PackageVersion]%VERSION%
    echo ##vso[task.setvariable variable=NuGetPackageOutput]%PACK_OUTPUT%
  displayName: 'Set Versioning and Paths'

# Step 6: Pack the project
- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    packagesToPack: '$(RestoreBuildProjects)'
    versioningScheme: 'off'
    arguments: '--version $(PackageVersion)'
    outputDir: '$(NuGetPackageOutput)'

# Step 7: Publish the project
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# Step 8: Publish artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    PathtoPublish: '$(NuGetPackageOutput)'
  condition: succeededOrFailed()

# Step 9: Push NuGet packages based on branch
- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Develop)'
  condition: eq(variables['Build.SourceBranchName'], 'develop')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'develop-con'

- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Main)'
  condition: eq(variables['Build.SourceBranchName'], 'main')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'main-con'

- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Release)'
  condition: eq(variables['Build.SourceBranchName'], 'release')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'release-con'
