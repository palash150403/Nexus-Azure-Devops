trigger:
  branches:
    include:
      - main
      - develop
      - release

pool:
  vmImage: 'ubuntu-latest'

variables:
  RestoreBuildProjects: '**/*.csproj'
  BuildConfiguration: 'Release'
  NuGetPackageOutput: '$(Build.ArtifactStagingDirectory)/nuget'
  ProjectName: 'helloworld'

steps:
# Step 1: Display all files in the repository
- script: ls -R
  displayName: 'List all files in the repository'

# Step 2: Set up .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 3: Restore NuGet packages
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(RestoreBuildProjects)'

# Step 4: Build the project
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

- script: |
    echo "Determining branch-specific versioning and paths..."

    BUILD_BUILDNUMBER=$(Build.BuildNumber)
    COMMIT_ID=$(echo "$BUILD_SOURCEVERSION" | cut -c 1-5)  
    BRANCH_NAME=$(Build.SourceBranchName)

    echo "Branch name is: $BRANCH_NAME"

    PACK_OUTPUT=$(Build.ArtifactStagingDirectory)/nuget

    # Attempt to get a tag that is directly associated with the current commit
    TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")

    if [ -z "$TAG" ]; then
        echo "No tag found for the current commit. Looking for the nearest tag..."
        
        # Get the nearest tag in history (even if the commit itself is not tagged)
        TAG=$(git tag --sort=-creatordate | head -n 1)
        
        if [ -z "$TAG" ]; then
            echo "No tags found in the repository. Defaulting to untagged."
            TAG="untagged"
        else
            echo "Nearest tag found: $TAG"
        fi
    else
        echo "Tag found: $TAG"
    fi

    # Set version based on the branch
    if [ "$BRANCH_NAME" == "develop" ]; then
        VERSION="1.0.0-$BUILD_BUILDNUMBER"
    elif [ "$BRANCH_NAME" == "main" ]; then
        VERSION="$TAG-$(ProjectName)"
        PACK_OUTPUT="$(Build.ArtifactStagingDirectory)/nuget/1.0"
    elif [ "$BRANCH_NAME" == "release" ]; then
        VERSION="1.0.0-$COMMIT_ID-$BRANCH_NAME"
        PACK_OUTPUT="$(Build.ArtifactStagingDirectory)/nuget/release"
    else
        VERSION="$(ProjectName)-1.0.$BUILD_BUILDNUMBER-beta"
    fi

    echo "Using output path: $PACK_OUTPUT"
    echo "Generated version: $VERSION"

    # Set pipeline variables for version and output path
    echo "##vso[task.setvariable variable=PackageVersion]$VERSION"
    echo "##vso[task.setvariable variable=NuGetPackageOutput]$PACK_OUTPUT"
  displayName: 'Set Dynamic Versioning and Paths'

# Step 5.1: Update PackageId in .csproj for main branch
- script: |
    echo "Updating PackageId in .csproj for main branch..."

    # Get the nearest tag using 'git describe' or 'git tag' if no tag exists
    TAG=$(git describe --tags --exact-match 2>/dev/null || git tag --sort=-creatordate | head -n 1 || echo "untagged")
    echo "Tag: $TAG"

    # Construct the dynamic PackageId
    PACKAGE_ID="$TAG-$(ProjectName)"
    echo "Dynamic PackageId: $PACKAGE_ID"

    # Update the .csproj file with the dynamic PackageId
    find . -name '*.csproj' -exec sed -i "s|<PackageId>.*</PackageId>|<PackageId>${PACKAGE_ID}</PackageId>|g" {} +

    # Confirm the update by printing the .csproj file contents
    find . -name '*.csproj' -exec cat {} \;

  condition: eq(variables['Build.SourceBranchName'], 'main')
  displayName: 'Update PackageId in .csproj for main'





# Step 5.2: Update PackageId in .csproj for release branch
- script: |
    echo "Updating PackageId in .csproj for release branch..."

    SHORT_COMMIT_ID=$(echo "$(Build.SourceVersion)" | cut -c 1-5)
    echo "Short Commit ID: $SHORT_COMMIT_ID"

    PACKAGE_ID="$(ProjectName)-$(PackageVersion)-$SHORT_COMMIT_ID-$(Build.SourceBranchName)"
    echo "Dynamic PackageId: $PACKAGE_ID"

    find . -name '*.csproj' -exec sed -i "s|<PackageId>.*</PackageId>|<PackageId>${PACKAGE_ID}</PackageId>|g" {} +

    find . -name '*.csproj' -exec cat {} \;

  condition: eq(variables['Build.SourceBranchName'], 'release')
  displayName: 'Update PackageId in .csproj for release'

# Step 6: Pack the project
- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    packagesToPack: '$(RestoreBuildProjects)'
    versioningScheme: 'off'
    arguments: '--configuration $(BuildConfiguration) /p:PackageVersion=$(PackageVersion)'
    outputDir: '$(NuGetPackageOutput)'  

# Step 7: Publish the project
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# Step 8: Publish artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    PathtoPublish: '$(NuGetPackageOutput)'
  condition: succeededOrFailed()

# Step 9: Push NuGet packages based on branch
- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Develop)'
  condition: eq(variables['Build.SourceBranchName'], 'develop')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'develop-con'

- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Main)'
  condition: eq(variables['Build.SourceBranchName'], 'main')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'main-con'

- task: NuGetCommand@2
  displayName: 'Push NuGet Package (Release)'
  condition: eq(variables['Build.SourceBranchName'], 'release')
  inputs:
    command: 'push'
    packagesToPush: '$(NuGetPackageOutput)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'release-con'
